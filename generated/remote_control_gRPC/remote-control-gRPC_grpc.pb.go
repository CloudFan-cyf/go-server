// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/remote-control-gRPC.proto

package remote_control_gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserClientService_SendCommand_FullMethodName             = "/remote_control_gRPC.UserClientService/SendCommand"
	UserClientService_PushCommand_FullMethodName             = "/remote_control_gRPC.UserClientService/PushCommand"
	UserClientService_CancelVideoSubscription_FullMethodName = "/remote_control_gRPC.UserClientService/CancelVideoSubscription"
	UserClientService_PullVideoStream_FullMethodName         = "/remote_control_gRPC.UserClientService/PullVideoStream"
	UserClientService_PullStatus_FullMethodName              = "/remote_control_gRPC.UserClientService/PullStatus"
	UserClientService_Ping_FullMethodName                    = "/remote_control_gRPC.UserClientService/Ping"
	UserClientService_SendAuthentications_FullMethodName     = "/remote_control_gRPC.UserClientService/SendAuthentications"
)

// UserClientServiceClient is the client API for UserClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户客户端服务
type UserClientServiceClient interface {
	// 用户客户端向服务器发送指令
	// XXX: 仅用于零散指令，例如打开某个东西。Send 比 Push 更看中 Response，更加一一对应。
	SendCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	// XXX: 用户客户端向服务器发送大量指令，例如摇杆。
	PushCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommandRequest, CommandResponse], error)
	// 用户端取消订阅视频流
	CancelVideoSubscription(ctx context.Context, in *CancelVideoSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 用户客户端从服务器pull视频流
	PullVideoStream(ctx context.Context, in *PullVideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoFrame], error)
	// XXX: 用户客户端拉取机器人状态。实现时，状态需要是粘性的（sticky, or say, latch）。
	PullStatus(ctx context.Context, in *PullStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Status], error)
	// CYF: 心跳服务，检测连接状态
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CYF: 认证服务，用户客户端连接上后首先向服务器发送自己的ID信息
	SendAuthentications(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClientServiceClient(cc grpc.ClientConnInterface) UserClientServiceClient {
	return &userClientServiceClient{cc}
}

func (c *userClientServiceClient) SendCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, UserClientService_SendCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClientServiceClient) PushCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommandRequest, CommandResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserClientService_ServiceDesc.Streams[0], UserClientService_PushCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommandRequest, CommandResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserClientService_PushCommandClient = grpc.BidiStreamingClient[CommandRequest, CommandResponse]

func (c *userClientServiceClient) CancelVideoSubscription(ctx context.Context, in *CancelVideoSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserClientService_CancelVideoSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClientServiceClient) PullVideoStream(ctx context.Context, in *PullVideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoFrame], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserClientService_ServiceDesc.Streams[1], UserClientService_PullVideoStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullVideoRequest, VideoFrame]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserClientService_PullVideoStreamClient = grpc.ServerStreamingClient[VideoFrame]

func (c *userClientServiceClient) PullStatus(ctx context.Context, in *PullStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Status], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserClientService_ServiceDesc.Streams[2], UserClientService_PullStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullStatusRequest, Status]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserClientService_PullStatusClient = grpc.ServerStreamingClient[Status]

func (c *userClientServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserClientService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClientServiceClient) SendAuthentications(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserClientService_SendAuthentications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserClientServiceServer is the server API for UserClientService service.
// All implementations must embed UnimplementedUserClientServiceServer
// for forward compatibility.
//
// 用户客户端服务
type UserClientServiceServer interface {
	// 用户客户端向服务器发送指令
	// XXX: 仅用于零散指令，例如打开某个东西。Send 比 Push 更看中 Response，更加一一对应。
	SendCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	// XXX: 用户客户端向服务器发送大量指令，例如摇杆。
	PushCommand(grpc.BidiStreamingServer[CommandRequest, CommandResponse]) error
	// 用户端取消订阅视频流
	CancelVideoSubscription(context.Context, *CancelVideoSubscriptionRequest) (*emptypb.Empty, error)
	// 用户客户端从服务器pull视频流
	PullVideoStream(*PullVideoRequest, grpc.ServerStreamingServer[VideoFrame]) error
	// XXX: 用户客户端拉取机器人状态。实现时，状态需要是粘性的（sticky, or say, latch）。
	PullStatus(*PullStatusRequest, grpc.ServerStreamingServer[Status]) error
	// CYF: 心跳服务，检测连接状态
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// CYF: 认证服务，用户客户端连接上后首先向服务器发送自己的ID信息
	SendAuthentications(context.Context, *UserId) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserClientServiceServer()
}

// UnimplementedUserClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserClientServiceServer struct{}

func (UnimplementedUserClientServiceServer) SendCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedUserClientServiceServer) PushCommand(grpc.BidiStreamingServer[CommandRequest, CommandResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PushCommand not implemented")
}
func (UnimplementedUserClientServiceServer) CancelVideoSubscription(context.Context, *CancelVideoSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelVideoSubscription not implemented")
}
func (UnimplementedUserClientServiceServer) PullVideoStream(*PullVideoRequest, grpc.ServerStreamingServer[VideoFrame]) error {
	return status.Errorf(codes.Unimplemented, "method PullVideoStream not implemented")
}
func (UnimplementedUserClientServiceServer) PullStatus(*PullStatusRequest, grpc.ServerStreamingServer[Status]) error {
	return status.Errorf(codes.Unimplemented, "method PullStatus not implemented")
}
func (UnimplementedUserClientServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserClientServiceServer) SendAuthentications(context.Context, *UserId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAuthentications not implemented")
}
func (UnimplementedUserClientServiceServer) mustEmbedUnimplementedUserClientServiceServer() {}
func (UnimplementedUserClientServiceServer) testEmbeddedByValue()                           {}

// UnsafeUserClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserClientServiceServer will
// result in compilation errors.
type UnsafeUserClientServiceServer interface {
	mustEmbedUnimplementedUserClientServiceServer()
}

func RegisterUserClientServiceServer(s grpc.ServiceRegistrar, srv UserClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserClientService_ServiceDesc, srv)
}

func _UserClientService_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServiceServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserClientService_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServiceServer).SendCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserClientService_PushCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserClientServiceServer).PushCommand(&grpc.GenericServerStream[CommandRequest, CommandResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserClientService_PushCommandServer = grpc.BidiStreamingServer[CommandRequest, CommandResponse]

func _UserClientService_CancelVideoSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelVideoSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServiceServer).CancelVideoSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserClientService_CancelVideoSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServiceServer).CancelVideoSubscription(ctx, req.(*CancelVideoSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserClientService_PullVideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullVideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserClientServiceServer).PullVideoStream(m, &grpc.GenericServerStream[PullVideoRequest, VideoFrame]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserClientService_PullVideoStreamServer = grpc.ServerStreamingServer[VideoFrame]

func _UserClientService_PullStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserClientServiceServer).PullStatus(m, &grpc.GenericServerStream[PullStatusRequest, Status]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserClientService_PullStatusServer = grpc.ServerStreamingServer[Status]

func _UserClientService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserClientService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserClientService_SendAuthentications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServiceServer).SendAuthentications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserClientService_SendAuthentications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServiceServer).SendAuthentications(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// UserClientService_ServiceDesc is the grpc.ServiceDesc for UserClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote_control_gRPC.UserClientService",
	HandlerType: (*UserClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _UserClientService_SendCommand_Handler,
		},
		{
			MethodName: "CancelVideoSubscription",
			Handler:    _UserClientService_CancelVideoSubscription_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _UserClientService_Ping_Handler,
		},
		{
			MethodName: "SendAuthentications",
			Handler:    _UserClientService_SendAuthentications_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushCommand",
			Handler:       _UserClientService_PushCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullVideoStream",
			Handler:       _UserClientService_PullVideoStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullStatus",
			Handler:       _UserClientService_PullStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/remote-control-gRPC.proto",
}

const (
	RobotClientService_SubscribeNotify_FullMethodName     = "/remote_control_gRPC.RobotClientService/SubscribeNotify"
	RobotClientService_PushVideoStream_FullMethodName     = "/remote_control_gRPC.RobotClientService/PushVideoStream"
	RobotClientService_PullCommand_FullMethodName         = "/remote_control_gRPC.RobotClientService/PullCommand"
	RobotClientService_PushStatus_FullMethodName          = "/remote_control_gRPC.RobotClientService/PushStatus"
	RobotClientService_Ping_FullMethodName                = "/remote_control_gRPC.RobotClientService/Ping"
	RobotClientService_SendAuthentications_FullMethodName = "/remote_control_gRPC.RobotClientService/SendAuthentications"
)

// RobotClientServiceClient is the client API for RobotClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 机器人客户端服务
type RobotClientServiceClient interface {
	// 订阅通知服务
	// CYF:Server-side streaming RPC，机器人请求服务器建立通知流，
	// 服务器在收到来自用户的订阅请求后向通知流中写入通知，通知机器人开始推送视频流
	SubscribeNotify(ctx context.Context, in *ListenToSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribedNotification], error)
	// 机器人向服务器push视频流。
	// XXX: 当机器人作为服务器时，直接响应 PullVideoStream。
	PushVideoStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[VideoFrameData, emptypb.Empty], error)
	// 机器人接收指令
	// 服务器有一指令队列，机器人从队列中取出指令并执行
	// 服务器中的指令队列将依靠ListenToCommandQueueRequest请求建立，为每个robot id创建一个队列
	// XXX: 当机器人作为服务器时，直接响应 PushCommand。
	PullCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommandResponse, CommandRequest], error)
	// XXX: 当机器人作为服务器时，直接响应 PullStatus。
	PushStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Status, emptypb.Empty], error)
	// CYF: 心跳服务，检测连接状态
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendAuthentications(ctx context.Context, in *RobotId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type robotClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotClientServiceClient(cc grpc.ClientConnInterface) RobotClientServiceClient {
	return &robotClientServiceClient{cc}
}

func (c *robotClientServiceClient) SubscribeNotify(ctx context.Context, in *ListenToSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribedNotification], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RobotClientService_ServiceDesc.Streams[0], RobotClientService_SubscribeNotify_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenToSubscriptionRequest, SubscribedNotification]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RobotClientService_SubscribeNotifyClient = grpc.ServerStreamingClient[SubscribedNotification]

func (c *robotClientServiceClient) PushVideoStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[VideoFrameData, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RobotClientService_ServiceDesc.Streams[1], RobotClientService_PushVideoStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VideoFrameData, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RobotClientService_PushVideoStreamClient = grpc.ClientStreamingClient[VideoFrameData, emptypb.Empty]

func (c *robotClientServiceClient) PullCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommandResponse, CommandRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RobotClientService_ServiceDesc.Streams[2], RobotClientService_PullCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommandResponse, CommandRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RobotClientService_PullCommandClient = grpc.BidiStreamingClient[CommandResponse, CommandRequest]

func (c *robotClientServiceClient) PushStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Status, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RobotClientService_ServiceDesc.Streams[3], RobotClientService_PushStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Status, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RobotClientService_PushStatusClient = grpc.ClientStreamingClient[Status, emptypb.Empty]

func (c *robotClientServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RobotClientService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClientServiceClient) SendAuthentications(ctx context.Context, in *RobotId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RobotClientService_SendAuthentications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotClientServiceServer is the server API for RobotClientService service.
// All implementations must embed UnimplementedRobotClientServiceServer
// for forward compatibility.
//
// 机器人客户端服务
type RobotClientServiceServer interface {
	// 订阅通知服务
	// CYF:Server-side streaming RPC，机器人请求服务器建立通知流，
	// 服务器在收到来自用户的订阅请求后向通知流中写入通知，通知机器人开始推送视频流
	SubscribeNotify(*ListenToSubscriptionRequest, grpc.ServerStreamingServer[SubscribedNotification]) error
	// 机器人向服务器push视频流。
	// XXX: 当机器人作为服务器时，直接响应 PullVideoStream。
	PushVideoStream(grpc.ClientStreamingServer[VideoFrameData, emptypb.Empty]) error
	// 机器人接收指令
	// 服务器有一指令队列，机器人从队列中取出指令并执行
	// 服务器中的指令队列将依靠ListenToCommandQueueRequest请求建立，为每个robot id创建一个队列
	// XXX: 当机器人作为服务器时，直接响应 PushCommand。
	PullCommand(grpc.BidiStreamingServer[CommandResponse, CommandRequest]) error
	// XXX: 当机器人作为服务器时，直接响应 PullStatus。
	PushStatus(grpc.ClientStreamingServer[Status, emptypb.Empty]) error
	// CYF: 心跳服务，检测连接状态
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SendAuthentications(context.Context, *RobotId) (*emptypb.Empty, error)
	mustEmbedUnimplementedRobotClientServiceServer()
}

// UnimplementedRobotClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRobotClientServiceServer struct{}

func (UnimplementedRobotClientServiceServer) SubscribeNotify(*ListenToSubscriptionRequest, grpc.ServerStreamingServer[SubscribedNotification]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNotify not implemented")
}
func (UnimplementedRobotClientServiceServer) PushVideoStream(grpc.ClientStreamingServer[VideoFrameData, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method PushVideoStream not implemented")
}
func (UnimplementedRobotClientServiceServer) PullCommand(grpc.BidiStreamingServer[CommandResponse, CommandRequest]) error {
	return status.Errorf(codes.Unimplemented, "method PullCommand not implemented")
}
func (UnimplementedRobotClientServiceServer) PushStatus(grpc.ClientStreamingServer[Status, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method PushStatus not implemented")
}
func (UnimplementedRobotClientServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRobotClientServiceServer) SendAuthentications(context.Context, *RobotId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAuthentications not implemented")
}
func (UnimplementedRobotClientServiceServer) mustEmbedUnimplementedRobotClientServiceServer() {}
func (UnimplementedRobotClientServiceServer) testEmbeddedByValue()                            {}

// UnsafeRobotClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotClientServiceServer will
// result in compilation errors.
type UnsafeRobotClientServiceServer interface {
	mustEmbedUnimplementedRobotClientServiceServer()
}

func RegisterRobotClientServiceServer(s grpc.ServiceRegistrar, srv RobotClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedRobotClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RobotClientService_ServiceDesc, srv)
}

func _RobotClientService_SubscribeNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenToSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RobotClientServiceServer).SubscribeNotify(m, &grpc.GenericServerStream[ListenToSubscriptionRequest, SubscribedNotification]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RobotClientService_SubscribeNotifyServer = grpc.ServerStreamingServer[SubscribedNotification]

func _RobotClientService_PushVideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RobotClientServiceServer).PushVideoStream(&grpc.GenericServerStream[VideoFrameData, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RobotClientService_PushVideoStreamServer = grpc.ClientStreamingServer[VideoFrameData, emptypb.Empty]

func _RobotClientService_PullCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RobotClientServiceServer).PullCommand(&grpc.GenericServerStream[CommandResponse, CommandRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RobotClientService_PullCommandServer = grpc.BidiStreamingServer[CommandResponse, CommandRequest]

func _RobotClientService_PushStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RobotClientServiceServer).PushStatus(&grpc.GenericServerStream[Status, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RobotClientService_PushStatusServer = grpc.ClientStreamingServer[Status, emptypb.Empty]

func _RobotClientService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotClientServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotClientService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotClientServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotClientService_SendAuthentications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotClientServiceServer).SendAuthentications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotClientService_SendAuthentications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotClientServiceServer).SendAuthentications(ctx, req.(*RobotId))
	}
	return interceptor(ctx, in, info, handler)
}

// RobotClientService_ServiceDesc is the grpc.ServiceDesc for RobotClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RobotClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote_control_gRPC.RobotClientService",
	HandlerType: (*RobotClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RobotClientService_Ping_Handler,
		},
		{
			MethodName: "SendAuthentications",
			Handler:    _RobotClientService_SendAuthentications_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeNotify",
			Handler:       _RobotClientService_SubscribeNotify_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushVideoStream",
			Handler:       _RobotClientService_PushVideoStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PullCommand",
			Handler:       _RobotClientService_PullCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PushStatus",
			Handler:       _RobotClientService_PushStatus_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/remote-control-gRPC.proto",
}
