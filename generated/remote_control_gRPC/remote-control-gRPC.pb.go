// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: proto/remote-control-gRPC.proto

package remote_control_gRPC

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// XXX: 单独开一个类型表示感兴趣的机器人的 ID。内部结构以后可能会变得更复杂。
type RobotId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RobotId) Reset() {
	*x = RobotId{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RobotId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotId) ProtoMessage() {}

func (x *RobotId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotId.ProtoReflect.Descriptor instead.
func (*RobotId) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{0}
}

func (x *RobotId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserId) Reset() {
	*x = UserId{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserId) ProtoMessage() {}

func (x *UserId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserId.ProtoReflect.Descriptor instead.
func (*UserId) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{1}
}

func (x *UserId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// XXX: 一个样例指令，摇杆控制机器人移动。
type VelocityCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinearX  float64 `protobuf:"fixed64,1,opt,name=linear_x,json=linearX,proto3" json:"linear_x,omitempty"`
	AngularZ float64 `protobuf:"fixed64,2,opt,name=angular_z,json=angularZ,proto3" json:"angular_z,omitempty"`
}

func (x *VelocityCommand) Reset() {
	*x = VelocityCommand{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VelocityCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VelocityCommand) ProtoMessage() {}

func (x *VelocityCommand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VelocityCommand.ProtoReflect.Descriptor instead.
func (*VelocityCommand) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{2}
}

func (x *VelocityCommand) GetLinearX() float64 {
	if x != nil {
		return x.LinearX
	}
	return 0
}

func (x *VelocityCommand) GetAngularZ() float64 {
	if x != nil {
		return x.AngularZ
	}
	return 0
}

// XXX: 控制端发送，被控端接收的指令。
type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId   uint32   `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`      // XXX: 控制端填写的递增序列号。仿 ROS。
	Stamp   uint64   `protobuf:"varint,2,opt,name=stamp,proto3" json:"stamp,omitempty"`                   // XXX: 控制端填写的时间戳。
	RobotId *RobotId `protobuf:"bytes,3,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"` // XXX: 感兴趣的被控端。
	// Types that are assignable to Command:
	//
	//	*CommandRequest_Velocity
	Command isCommandRequest_Command `protobuf_oneof:"command"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{3}
}

func (x *CommandRequest) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *CommandRequest) GetStamp() uint64 {
	if x != nil {
		return x.Stamp
	}
	return 0
}

func (x *CommandRequest) GetRobotId() *RobotId {
	if x != nil {
		return x.RobotId
	}
	return nil
}

func (m *CommandRequest) GetCommand() isCommandRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *CommandRequest) GetVelocity() *VelocityCommand {
	if x, ok := x.GetCommand().(*CommandRequest_Velocity); ok {
		return x.Velocity
	}
	return nil
}

type isCommandRequest_Command interface {
	isCommandRequest_Command()
}

type CommandRequest_Velocity struct {
	Velocity *VelocityCommand `protobuf:"bytes,4,opt,name=velocity,proto3,oneof"`
}

func (*CommandRequest_Velocity) isCommandRequest_Command() {}

// XXX: 统一命名为 Command。
type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId     uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`             // XXX: 控制端
	Stamp     uint64 `protobuf:"varint,2,opt,name=stamp,proto3" json:"stamp,omitempty"`                          // XXX: 被控端响应指令的时间戳。
	IsSuccess bool   `protobuf:"varint,3,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"` // XXX: 使用 is_x 的方式命名谓词。
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{4}
}

func (x *CommandResponse) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *CommandResponse) GetStamp() uint64 {
	if x != nil {
		return x.Stamp
	}
	return 0
}

func (x *CommandResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

// 定义机器人监听指令队列请求（服务器将依靠该请求来建立队列）
type ListenToCommandQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotId *RobotId `protobuf:"bytes,1,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
}

func (x *ListenToCommandQueueRequest) Reset() {
	*x = ListenToCommandQueueRequest{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenToCommandQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenToCommandQueueRequest) ProtoMessage() {}

func (x *ListenToCommandQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenToCommandQueueRequest.ProtoReflect.Descriptor instead.
func (*ListenToCommandQueueRequest) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{5}
}

func (x *ListenToCommandQueueRequest) GetRobotId() *RobotId {
	if x != nil {
		return x.RobotId
	}
	return nil
}

// 定义机器人状态信息
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XXX: 序号 1, 2, 3 保留。
	//
	// Types that are assignable to Status:
	//
	//	*Status_BatteryLevel
	//	*Status_ConnectionStatus
	//	*Status_ExecutingTask
	//	*Status_IsCharging
	//	*Status_CurrentPosition
	Status isStatus_Status `protobuf_oneof:"status"`
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{6}
}

func (m *Status) GetStatus() isStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *Status) GetBatteryLevel() float64 {
	if x, ok := x.GetStatus().(*Status_BatteryLevel); ok {
		return x.BatteryLevel
	}
	return 0
}

func (x *Status) GetConnectionStatus() int32 {
	if x, ok := x.GetStatus().(*Status_ConnectionStatus); ok {
		return x.ConnectionStatus
	}
	return 0
}

func (x *Status) GetExecutingTask() string {
	if x, ok := x.GetStatus().(*Status_ExecutingTask); ok {
		return x.ExecutingTask
	}
	return ""
}

func (x *Status) GetIsCharging() bool {
	if x, ok := x.GetStatus().(*Status_IsCharging); ok {
		return x.IsCharging
	}
	return false
}

func (x *Status) GetCurrentPosition() string {
	if x, ok := x.GetStatus().(*Status_CurrentPosition); ok {
		return x.CurrentPosition
	}
	return ""
}

type isStatus_Status interface {
	isStatus_Status()
}

type Status_BatteryLevel struct {
	BatteryLevel float64 `protobuf:"fixed64,4,opt,name=battery_level,json=batteryLevel,proto3,oneof"`
}

type Status_ConnectionStatus struct {
	ConnectionStatus int32 `protobuf:"varint,5,opt,name=connection_status,json=connectionStatus,proto3,oneof"`
}

type Status_ExecutingTask struct {
	ExecutingTask string `protobuf:"bytes,6,opt,name=executing_task,json=executingTask,proto3,oneof"`
}

type Status_IsCharging struct {
	IsCharging bool `protobuf:"varint,7,opt,name=is_charging,json=isCharging,proto3,oneof"`
}

type Status_CurrentPosition struct {
	CurrentPosition string `protobuf:"bytes,8,opt,name=current_position,json=currentPosition,proto3,oneof"`
}

func (*Status_BatteryLevel) isStatus_Status() {}

func (*Status_ConnectionStatus) isStatus_Status() {}

func (*Status_ExecutingTask) isStatus_Status() {}

func (*Status_IsCharging) isStatus_Status() {}

func (*Status_CurrentPosition) isStatus_Status() {}

// XXX
type PullStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotId *RobotId `protobuf:"bytes,1,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
}

func (x *PullStatusRequest) Reset() {
	*x = PullStatusRequest{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullStatusRequest) ProtoMessage() {}

func (x *PullStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullStatusRequest.ProtoReflect.Descriptor instead.
func (*PullStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{7}
}

func (x *PullStatusRequest) GetRobotId() *RobotId {
	if x != nil {
		return x.RobotId
	}
	return nil
}

// 用户客户端从服务器pull车辆特定摄像头的视频流的请求
type PullVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotId *RobotId `protobuf:"bytes,1,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
	// XXX: 目前该参数仅作为示例。
	CamId int32 `protobuf:"varint,2,opt,name=cam_id,json=camId,proto3" json:"cam_id,omitempty"`
}

func (x *PullVideoRequest) Reset() {
	*x = PullVideoRequest{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullVideoRequest) ProtoMessage() {}

func (x *PullVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullVideoRequest.ProtoReflect.Descriptor instead.
func (*PullVideoRequest) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{8}
}

func (x *PullVideoRequest) GetRobotId() *RobotId {
	if x != nil {
		return x.RobotId
	}
	return nil
}

func (x *PullVideoRequest) GetCamId() int32 {
	if x != nil {
		return x.CamId
	}
	return 0
}

// CYF：用户端取消订阅视频流请求
type CancelVideoSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotId *RobotId `protobuf:"bytes,1,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
}

func (x *CancelVideoSubscriptionRequest) Reset() {
	*x = CancelVideoSubscriptionRequest{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelVideoSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelVideoSubscriptionRequest) ProtoMessage() {}

func (x *CancelVideoSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelVideoSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CancelVideoSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{9}
}

func (x *CancelVideoSubscriptionRequest) GetRobotId() *RobotId {
	if x != nil {
		return x.RobotId
	}
	return nil
}

// CYF:机器人客户端向服务端请求订阅通知流
type ListenToSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotId *RobotId `protobuf:"bytes,1,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
}

func (x *ListenToSubscriptionRequest) Reset() {
	*x = ListenToSubscriptionRequest{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenToSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenToSubscriptionRequest) ProtoMessage() {}

func (x *ListenToSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenToSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*ListenToSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{10}
}

func (x *ListenToSubscriptionRequest) GetRobotId() *RobotId {
	if x != nil {
		return x.RobotId
	}
	return nil
}

// CYF: 服务端向机器人发送的订阅通知，表示某机器人已经被用户订阅视频流，通知机器人开始推送视频流
type SubscribedNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSubscribed bool `protobuf:"varint,1,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty"`
}

func (x *SubscribedNotification) Reset() {
	*x = SubscribedNotification{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribedNotification) ProtoMessage() {}

func (x *SubscribedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribedNotification.ProtoReflect.Descriptor instead.
func (*SubscribedNotification) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribedNotification) GetIsSubscribed() bool {
	if x != nil {
		return x.IsSubscribed
	}
	return false
}

type VideoFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XXX: data 的具体形式目前是 JPEG，可以变成别的，以后再说。
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *VideoFrame) Reset() {
	*x = VideoFrame{}
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFrame) ProtoMessage() {}

func (x *VideoFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_remote_control_gRPC_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFrame.ProtoReflect.Descriptor instead.
func (*VideoFrame) Descriptor() ([]byte, []int) {
	return file_proto_remote_control_gRPC_proto_rawDescGZIP(), []int{12}
}

func (x *VideoFrame) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_proto_remote_control_gRPC_proto protoreflect.FileDescriptor

var file_proto_remote_control_gRPC_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x1a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x19, 0x0a, 0x07, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x49,
	0x0a, 0x0f, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x58, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5a, 0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50,
	0x43, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x08, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x22, 0x5d, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x56, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52,
	0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x11,
	0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49,
	0x64, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x10, 0x50, 0x75,
	0x6c, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x07,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x59,
	0x0a, 0x1e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64,
	0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43,
	0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49,
	0x64, 0x22, 0x3d, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x22, 0x20, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0xe9, 0x04, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52,
	0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x66, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50,
	0x43, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50,
	0x43, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x0a, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50,
	0x43, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xfe,
	0x03, 0x0a, 0x12, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x30, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x50, 0x75, 0x73,
	0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52,
	0x50, 0x43, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x5c, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x23, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52,
	0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4b, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x2e,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x35, 0x42, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x67, 0x52, 0x50, 0x43, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_remote_control_gRPC_proto_rawDescOnce sync.Once
	file_proto_remote_control_gRPC_proto_rawDescData = file_proto_remote_control_gRPC_proto_rawDesc
)

func file_proto_remote_control_gRPC_proto_rawDescGZIP() []byte {
	file_proto_remote_control_gRPC_proto_rawDescOnce.Do(func() {
		file_proto_remote_control_gRPC_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_remote_control_gRPC_proto_rawDescData)
	})
	return file_proto_remote_control_gRPC_proto_rawDescData
}

var file_proto_remote_control_gRPC_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_remote_control_gRPC_proto_goTypes = []any{
	(*RobotId)(nil),                        // 0: remote_control_gRPC.RobotId
	(*UserId)(nil),                         // 1: remote_control_gRPC.UserId
	(*VelocityCommand)(nil),                // 2: remote_control_gRPC.VelocityCommand
	(*CommandRequest)(nil),                 // 3: remote_control_gRPC.CommandRequest
	(*CommandResponse)(nil),                // 4: remote_control_gRPC.CommandResponse
	(*ListenToCommandQueueRequest)(nil),    // 5: remote_control_gRPC.ListenToCommandQueueRequest
	(*Status)(nil),                         // 6: remote_control_gRPC.Status
	(*PullStatusRequest)(nil),              // 7: remote_control_gRPC.PullStatusRequest
	(*PullVideoRequest)(nil),               // 8: remote_control_gRPC.PullVideoRequest
	(*CancelVideoSubscriptionRequest)(nil), // 9: remote_control_gRPC.CancelVideoSubscriptionRequest
	(*ListenToSubscriptionRequest)(nil),    // 10: remote_control_gRPC.ListenToSubscriptionRequest
	(*SubscribedNotification)(nil),         // 11: remote_control_gRPC.SubscribedNotification
	(*VideoFrame)(nil),                     // 12: remote_control_gRPC.VideoFrame
	(*emptypb.Empty)(nil),                  // 13: google.protobuf.Empty
}
var file_proto_remote_control_gRPC_proto_depIdxs = []int32{
	0,  // 0: remote_control_gRPC.CommandRequest.robot_id:type_name -> remote_control_gRPC.RobotId
	2,  // 1: remote_control_gRPC.CommandRequest.velocity:type_name -> remote_control_gRPC.VelocityCommand
	0,  // 2: remote_control_gRPC.ListenToCommandQueueRequest.robot_id:type_name -> remote_control_gRPC.RobotId
	0,  // 3: remote_control_gRPC.PullStatusRequest.robot_id:type_name -> remote_control_gRPC.RobotId
	0,  // 4: remote_control_gRPC.PullVideoRequest.robot_id:type_name -> remote_control_gRPC.RobotId
	0,  // 5: remote_control_gRPC.CancelVideoSubscriptionRequest.robot_id:type_name -> remote_control_gRPC.RobotId
	0,  // 6: remote_control_gRPC.ListenToSubscriptionRequest.robot_id:type_name -> remote_control_gRPC.RobotId
	3,  // 7: remote_control_gRPC.UserClientService.SendCommand:input_type -> remote_control_gRPC.CommandRequest
	3,  // 8: remote_control_gRPC.UserClientService.PushCommand:input_type -> remote_control_gRPC.CommandRequest
	9,  // 9: remote_control_gRPC.UserClientService.CancelVideoSubscription:input_type -> remote_control_gRPC.CancelVideoSubscriptionRequest
	8,  // 10: remote_control_gRPC.UserClientService.PullVideoStream:input_type -> remote_control_gRPC.PullVideoRequest
	7,  // 11: remote_control_gRPC.UserClientService.PullStatus:input_type -> remote_control_gRPC.PullStatusRequest
	13, // 12: remote_control_gRPC.UserClientService.Ping:input_type -> google.protobuf.Empty
	1,  // 13: remote_control_gRPC.UserClientService.SendAuthentications:input_type -> remote_control_gRPC.UserId
	10, // 14: remote_control_gRPC.RobotClientService.SubscribeNotify:input_type -> remote_control_gRPC.ListenToSubscriptionRequest
	12, // 15: remote_control_gRPC.RobotClientService.PushVideoStream:input_type -> remote_control_gRPC.VideoFrame
	4,  // 16: remote_control_gRPC.RobotClientService.PullCommand:input_type -> remote_control_gRPC.CommandResponse
	6,  // 17: remote_control_gRPC.RobotClientService.PushStatus:input_type -> remote_control_gRPC.Status
	13, // 18: remote_control_gRPC.RobotClientService.Ping:input_type -> google.protobuf.Empty
	0,  // 19: remote_control_gRPC.RobotClientService.SendAuthentications:input_type -> remote_control_gRPC.RobotId
	4,  // 20: remote_control_gRPC.UserClientService.SendCommand:output_type -> remote_control_gRPC.CommandResponse
	4,  // 21: remote_control_gRPC.UserClientService.PushCommand:output_type -> remote_control_gRPC.CommandResponse
	13, // 22: remote_control_gRPC.UserClientService.CancelVideoSubscription:output_type -> google.protobuf.Empty
	12, // 23: remote_control_gRPC.UserClientService.PullVideoStream:output_type -> remote_control_gRPC.VideoFrame
	6,  // 24: remote_control_gRPC.UserClientService.PullStatus:output_type -> remote_control_gRPC.Status
	13, // 25: remote_control_gRPC.UserClientService.Ping:output_type -> google.protobuf.Empty
	13, // 26: remote_control_gRPC.UserClientService.SendAuthentications:output_type -> google.protobuf.Empty
	11, // 27: remote_control_gRPC.RobotClientService.SubscribeNotify:output_type -> remote_control_gRPC.SubscribedNotification
	13, // 28: remote_control_gRPC.RobotClientService.PushVideoStream:output_type -> google.protobuf.Empty
	3,  // 29: remote_control_gRPC.RobotClientService.PullCommand:output_type -> remote_control_gRPC.CommandRequest
	13, // 30: remote_control_gRPC.RobotClientService.PushStatus:output_type -> google.protobuf.Empty
	13, // 31: remote_control_gRPC.RobotClientService.Ping:output_type -> google.protobuf.Empty
	13, // 32: remote_control_gRPC.RobotClientService.SendAuthentications:output_type -> google.protobuf.Empty
	20, // [20:33] is the sub-list for method output_type
	7,  // [7:20] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_remote_control_gRPC_proto_init() }
func file_proto_remote_control_gRPC_proto_init() {
	if File_proto_remote_control_gRPC_proto != nil {
		return
	}
	file_proto_remote_control_gRPC_proto_msgTypes[3].OneofWrappers = []any{
		(*CommandRequest_Velocity)(nil),
	}
	file_proto_remote_control_gRPC_proto_msgTypes[6].OneofWrappers = []any{
		(*Status_BatteryLevel)(nil),
		(*Status_ConnectionStatus)(nil),
		(*Status_ExecutingTask)(nil),
		(*Status_IsCharging)(nil),
		(*Status_CurrentPosition)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_remote_control_gRPC_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_remote_control_gRPC_proto_goTypes,
		DependencyIndexes: file_proto_remote_control_gRPC_proto_depIdxs,
		MessageInfos:      file_proto_remote_control_gRPC_proto_msgTypes,
	}.Build()
	File_proto_remote_control_gRPC_proto = out.File
	file_proto_remote_control_gRPC_proto_rawDesc = nil
	file_proto_remote_control_gRPC_proto_goTypes = nil
	file_proto_remote_control_gRPC_proto_depIdxs = nil
}
